#!/usr/bin/sh
SOURCE=~/tobey.dev
SCRIPT=~/script
TMP=~/tmp
RUGNE=/home2/xiaochj/
INLINE_ASM=/home2/xfguan/feature/inline_asm/test
INLINE_ASM=~/inline
SOURCE2=/home2/xiaochj/tobey.dev/
function cdsc()
{
	cd $SCRIPT
}

function cdev()
{
	cd $SOURCE
}

function back()
{
	cp $1 $1.bak
	cp $1 ~/back/$1
}

function dev()
{
	rm -f $SOURCE/xlCcode
	ln -s $SOURCE/dev.cw_main $SOURCE/xlCcode
}

function debug()
{
	rm -f $SOURCE/xlCcode
	cp $SOURCE/xlccode $SOURCE/xlCcode
}

function rmbak()
{
	find . -name "*~" -o -name "*.bak" | xargs rm -f -v
}

function run()
{
	xlc -tb -B$SOURCE/ $*
}

function part()
{
	n1="1"
	n2=0
	file=""
	if [ $# -eq 3 ]
	then	
		n1=$1
		n2=$2
		file=$3
	elif [ $# -eq 2 ]
	then
		n2=$1
		file=$2
	else
		return
	fi
	sed -n  "$n1","$n2"p $file
}

function btb()
{
	cd $SOURCE;
	gmake PROCS=12 BUILD_PLATFORM=sles10 dev.cw_main;
	cd -;
}

function cdtmp()
{
	cd $TMP
}

function cdrg()
{
	cd $RUGNE
}

function cdinl()
{
	cd $INLINE_ASM
}

function remake()
{
	make clean;make
}

function sstr()
{
	find . -name "*.[c|h]*" -exec grep "$*" "{}" -nH \;
}

function sstri()
{
	find . -name "*.[c|h]*" -exec grep "$*" "{}" -nH \;
}

function objd()
{
	if [ -n "$1" ]
	then
		objdump -d $1
	fi
}

function ffile()
{
	if [ "$1" != "" ]
	then
		find . -name "*$1*"
	fi

}


function clean()
{
	cd $SOURCE;
	gmake clobber BUILD_PLATFORM=sles10;
	cd -;
}

function rmpos()
{
	if [ $# -gt 0 ]
	then
		l=$1
		l=${#l}
		for i in `ls *."$1"`
		do
			j=`echo $i | awk -v val=$l 'BEGIN{len=val;}{print substr($1,0,length($1)-len-1);}'`
			echo $j >> b
			cp $i $j
		done
	fi
}

function new()
{
	if [ $# -gt 0 ]
	then
		cp $1 ~/diff/new/
	fi
}

function old()
{
	if [ $# -gt 0 ]
	then
		cp $1 ~/diff/old/
	fi
}

function genc()
{
	find . -name "*.[chC]" -o -name "*.ch" -o -name "*.cpp" > cfile
}

function cdev2()
{
	cd $SOURCE2
}
