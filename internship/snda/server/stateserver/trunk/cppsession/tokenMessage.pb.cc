// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tokenMessage.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StateServer {

namespace {

const ::google::protobuf::Descriptor* TokenMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenMessage_Paramlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenMessage_Paramlist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tokenMessage_2eproto() {
  protobuf_AddDesc_tokenMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tokenMessage.proto");
  GOOGLE_CHECK(file != NULL);
  TokenMessage_descriptor_ = file->message_type(0);
  static const int TokenMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage, apiname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage, params_),
  };
  TokenMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenMessage_descriptor_,
      TokenMessage::default_instance_,
      TokenMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenMessage));
  TokenMessage_Paramlist_descriptor_ = TokenMessage_descriptor_->nested_type(0);
  static const int TokenMessage_Paramlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage_Paramlist, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage_Paramlist, value_),
  };
  TokenMessage_Paramlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenMessage_Paramlist_descriptor_,
      TokenMessage_Paramlist::default_instance_,
      TokenMessage_Paramlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage_Paramlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenMessage_Paramlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenMessage_Paramlist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tokenMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenMessage_descriptor_, &TokenMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenMessage_Paramlist_descriptor_, &TokenMessage_Paramlist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tokenMessage_2eproto() {
  delete TokenMessage::default_instance_;
  delete TokenMessage_reflection_;
  delete TokenMessage_Paramlist::default_instance_;
  delete TokenMessage_Paramlist_reflection_;
}

void protobuf_AddDesc_tokenMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022tokenMessage.proto\022\013StateServer\"\227\001\n\014To"
    "kenMessage\022\013\n\003seq\030\001 \002(\r\022\017\n\007apiname\030\002 \002(\t"
    "\022\013\n\003cmd\030\003 \002(\r\0223\n\006params\030\004 \003(\0132#.StateSer"
    "ver.TokenMessage.Paramlist\032\'\n\tParamlist\022"
    "\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\014", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tokenMessage.proto", &protobuf_RegisterTypes);
  TokenMessage::default_instance_ = new TokenMessage();
  TokenMessage_Paramlist::default_instance_ = new TokenMessage_Paramlist();
  TokenMessage::default_instance_->InitAsDefaultInstance();
  TokenMessage_Paramlist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tokenMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tokenMessage_2eproto {
  StaticDescriptorInitializer_tokenMessage_2eproto() {
    protobuf_AddDesc_tokenMessage_2eproto();
  }
} static_descriptor_initializer_tokenMessage_2eproto_;


// ===================================================================

const ::std::string TokenMessage_Paramlist::_default_key_;
const ::std::string TokenMessage_Paramlist::_default_value_;
#ifndef _MSC_VER
const int TokenMessage_Paramlist::kKeyFieldNumber;
const int TokenMessage_Paramlist::kValueFieldNumber;
#endif  // !_MSC_VER

TokenMessage_Paramlist::TokenMessage_Paramlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenMessage_Paramlist::InitAsDefaultInstance() {
}

TokenMessage_Paramlist::TokenMessage_Paramlist(const TokenMessage_Paramlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenMessage_Paramlist::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenMessage_Paramlist::~TokenMessage_Paramlist() {
  SharedDtor();
}

void TokenMessage_Paramlist::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void TokenMessage_Paramlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenMessage_Paramlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenMessage_Paramlist_descriptor_;
}

const TokenMessage_Paramlist& TokenMessage_Paramlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tokenMessage_2eproto();  return *default_instance_;
}

TokenMessage_Paramlist* TokenMessage_Paramlist::default_instance_ = NULL;

TokenMessage_Paramlist* TokenMessage_Paramlist::New() const {
  return new TokenMessage_Paramlist;
}

void TokenMessage_Paramlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenMessage_Paramlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenMessage_Paramlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required bytes value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenMessage_Paramlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required bytes value = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenMessage_Paramlist::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenMessage_Paramlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenMessage_Paramlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenMessage_Paramlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenMessage_Paramlist::MergeFrom(const TokenMessage_Paramlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenMessage_Paramlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenMessage_Paramlist::CopyFrom(const TokenMessage_Paramlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenMessage_Paramlist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TokenMessage_Paramlist::Swap(TokenMessage_Paramlist* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenMessage_Paramlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenMessage_Paramlist_descriptor_;
  metadata.reflection = TokenMessage_Paramlist_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string TokenMessage::_default_apiname_;
#ifndef _MSC_VER
const int TokenMessage::kSeqFieldNumber;
const int TokenMessage::kApinameFieldNumber;
const int TokenMessage::kCmdFieldNumber;
const int TokenMessage::kParamsFieldNumber;
#endif  // !_MSC_VER

TokenMessage::TokenMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenMessage::InitAsDefaultInstance() {
}

TokenMessage::TokenMessage(const TokenMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenMessage::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  apiname_ = const_cast< ::std::string*>(&_default_apiname_);
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenMessage::~TokenMessage() {
  SharedDtor();
}

void TokenMessage::SharedDtor() {
  if (apiname_ != &_default_apiname_) {
    delete apiname_;
  }
  if (this != default_instance_) {
  }
}

void TokenMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenMessage_descriptor_;
}

const TokenMessage& TokenMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tokenMessage_2eproto();  return *default_instance_;
}

TokenMessage* TokenMessage::default_instance_ = NULL;

TokenMessage* TokenMessage::New() const {
  return new TokenMessage;
}

void TokenMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = 0u;
    if (_has_bit(1)) {
      if (apiname_ != &_default_apiname_) {
        apiname_->clear();
      }
    }
    cmd_ = 0u;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apiname;
        break;
      }
      
      // required string apiname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apiname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apiname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apiname().data(), this->apiname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmd;
        break;
      }
      
      // required uint32 cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }
      
      // repeated .StateServer.TokenMessage.Paramlist params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seq = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }
  
  // required string apiname = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apiname().data(), this->apiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apiname(), output);
  }
  
  // required uint32 cmd = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cmd(), output);
  }
  
  // repeated .StateServer.TokenMessage.Paramlist params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->params(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seq = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }
  
  // required string apiname = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apiname().data(), this->apiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apiname(), target);
  }
  
  // required uint32 cmd = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cmd(), target);
  }
  
  // repeated .StateServer.TokenMessage.Paramlist params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->params(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
    // required string apiname = 2;
    if (has_apiname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apiname());
    }
    
    // required uint32 cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }
    
  }
  // repeated .StateServer.TokenMessage.Paramlist params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenMessage::MergeFrom(const TokenMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_seq(from.seq());
    }
    if (from._has_bit(1)) {
      set_apiname(from.apiname());
    }
    if (from._has_bit(2)) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenMessage::CopyFrom(const TokenMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  return true;
}

void TokenMessage::Swap(TokenMessage* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(apiname_, other->apiname_);
    std::swap(cmd_, other->cmd_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenMessage_descriptor_;
  metadata.reflection = TokenMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StateServer

// @@protoc_insertion_point(global_scope)
