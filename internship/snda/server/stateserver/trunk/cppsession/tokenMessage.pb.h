// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tokenMessage.proto

#ifndef PROTOBUF_tokenMessage_2eproto__INCLUDED
#define PROTOBUF_tokenMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace StateServer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tokenMessage_2eproto();
void protobuf_AssignDesc_tokenMessage_2eproto();
void protobuf_ShutdownFile_tokenMessage_2eproto();

class TokenMessage;
class TokenMessage_Paramlist;

// ===================================================================

class TokenMessage_Paramlist : public ::google::protobuf::Message {
 public:
  TokenMessage_Paramlist();
  virtual ~TokenMessage_Paramlist();
  
  TokenMessage_Paramlist(const TokenMessage_Paramlist& from);
  
  inline TokenMessage_Paramlist& operator=(const TokenMessage_Paramlist& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TokenMessage_Paramlist& default_instance();
  
  void Swap(TokenMessage_Paramlist* other);
  
  // implements Message ----------------------------------------------
  
  TokenMessage_Paramlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TokenMessage_Paramlist& from);
  void MergeFrom(const TokenMessage_Paramlist& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:StateServer.TokenMessage.Paramlist)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_tokenMessage_2eproto();
  friend void protobuf_AssignDesc_tokenMessage_2eproto();
  friend void protobuf_ShutdownFile_tokenMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TokenMessage_Paramlist* default_instance_;
};
// -------------------------------------------------------------------

class TokenMessage : public ::google::protobuf::Message {
 public:
  TokenMessage();
  virtual ~TokenMessage();
  
  TokenMessage(const TokenMessage& from);
  
  inline TokenMessage& operator=(const TokenMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TokenMessage& default_instance();
  
  void Swap(TokenMessage* other);
  
  // implements Message ----------------------------------------------
  
  TokenMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TokenMessage& from);
  void MergeFrom(const TokenMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TokenMessage_Paramlist Paramlist;
  
  // accessors -------------------------------------------------------
  
  // required uint32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);
  
  // required string apiname = 2;
  inline bool has_apiname() const;
  inline void clear_apiname();
  static const int kApinameFieldNumber = 2;
  inline const ::std::string& apiname() const;
  inline void set_apiname(const ::std::string& value);
  inline void set_apiname(const char* value);
  inline void set_apiname(const char* value, size_t size);
  inline ::std::string* mutable_apiname();
  
  // required uint32 cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // repeated .StateServer.TokenMessage.Paramlist params = 4;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 4;
  inline const ::StateServer::TokenMessage_Paramlist& params(int index) const;
  inline ::StateServer::TokenMessage_Paramlist* mutable_params(int index);
  inline ::StateServer::TokenMessage_Paramlist* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::StateServer::TokenMessage_Paramlist >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::StateServer::TokenMessage_Paramlist >*
      mutable_params();
  
  // @@protoc_insertion_point(class_scope:StateServer.TokenMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 seq_;
  ::std::string* apiname_;
  static const ::std::string _default_apiname_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::RepeatedPtrField< ::StateServer::TokenMessage_Paramlist > params_;
  friend void  protobuf_AddDesc_tokenMessage_2eproto();
  friend void protobuf_AssignDesc_tokenMessage_2eproto();
  friend void protobuf_ShutdownFile_tokenMessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TokenMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TokenMessage_Paramlist

// required string key = 1;
inline bool TokenMessage_Paramlist::has_key() const {
  return _has_bit(0);
}
inline void TokenMessage_Paramlist::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& TokenMessage_Paramlist::key() const {
  return *key_;
}
inline void TokenMessage_Paramlist::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void TokenMessage_Paramlist::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void TokenMessage_Paramlist::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenMessage_Paramlist::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// required bytes value = 2;
inline bool TokenMessage_Paramlist::has_value() const {
  return _has_bit(1);
}
inline void TokenMessage_Paramlist::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& TokenMessage_Paramlist::value() const {
  return *value_;
}
inline void TokenMessage_Paramlist::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TokenMessage_Paramlist::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TokenMessage_Paramlist::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenMessage_Paramlist::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// TokenMessage

// required uint32 seq = 1;
inline bool TokenMessage::has_seq() const {
  return _has_bit(0);
}
inline void TokenMessage::clear_seq() {
  seq_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 TokenMessage::seq() const {
  return seq_;
}
inline void TokenMessage::set_seq(::google::protobuf::uint32 value) {
  _set_bit(0);
  seq_ = value;
}

// required string apiname = 2;
inline bool TokenMessage::has_apiname() const {
  return _has_bit(1);
}
inline void TokenMessage::clear_apiname() {
  if (apiname_ != &_default_apiname_) {
    apiname_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& TokenMessage::apiname() const {
  return *apiname_;
}
inline void TokenMessage::set_apiname(const ::std::string& value) {
  _set_bit(1);
  if (apiname_ == &_default_apiname_) {
    apiname_ = new ::std::string;
  }
  apiname_->assign(value);
}
inline void TokenMessage::set_apiname(const char* value) {
  _set_bit(1);
  if (apiname_ == &_default_apiname_) {
    apiname_ = new ::std::string;
  }
  apiname_->assign(value);
}
inline void TokenMessage::set_apiname(const char* value, size_t size) {
  _set_bit(1);
  if (apiname_ == &_default_apiname_) {
    apiname_ = new ::std::string;
  }
  apiname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenMessage::mutable_apiname() {
  _set_bit(1);
  if (apiname_ == &_default_apiname_) {
    apiname_ = new ::std::string;
  }
  return apiname_;
}

// required uint32 cmd = 3;
inline bool TokenMessage::has_cmd() const {
  return _has_bit(2);
}
inline void TokenMessage::clear_cmd() {
  cmd_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 TokenMessage::cmd() const {
  return cmd_;
}
inline void TokenMessage::set_cmd(::google::protobuf::uint32 value) {
  _set_bit(2);
  cmd_ = value;
}

// repeated .StateServer.TokenMessage.Paramlist params = 4;
inline int TokenMessage::params_size() const {
  return params_.size();
}
inline void TokenMessage::clear_params() {
  params_.Clear();
}
inline const ::StateServer::TokenMessage_Paramlist& TokenMessage::params(int index) const {
  return params_.Get(index);
}
inline ::StateServer::TokenMessage_Paramlist* TokenMessage::mutable_params(int index) {
  return params_.Mutable(index);
}
inline ::StateServer::TokenMessage_Paramlist* TokenMessage::add_params() {
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StateServer::TokenMessage_Paramlist >&
TokenMessage::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::StateServer::TokenMessage_Paramlist >*
TokenMessage::mutable_params() {
  return &params_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StateServer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tokenMessage_2eproto__INCLUDED
