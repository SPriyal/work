/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef MQueueInterface_H
#define MQueueInterface_H

#include <TProcessor.h>
#include "mis_types.h"



class MQueueInterfaceIf {
 public:
  virtual ~MQueueInterfaceIf() {}
  virtual int32_t getCurMsgNum() = 0;
  virtual void quit() = 0;
};

class MQueueInterfaceNull : virtual public MQueueInterfaceIf {
 public:
  virtual ~MQueueInterfaceNull() {}
  int32_t getCurMsgNum() {
    int32_t _return = 0;
    return _return;
  }
  void quit() {
    return;
  }
};

class MQueueInterface_getCurMsgNum_args {
 public:

  MQueueInterface_getCurMsgNum_args() {
  }

  virtual ~MQueueInterface_getCurMsgNum_args() throw() {}


  bool operator == (const MQueueInterface_getCurMsgNum_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MQueueInterface_getCurMsgNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MQueueInterface_getCurMsgNum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MQueueInterface_getCurMsgNum_pargs {
 public:


  virtual ~MQueueInterface_getCurMsgNum_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MQueueInterface_getCurMsgNum_result {
 public:

  MQueueInterface_getCurMsgNum_result() : success(0) {
  }

  virtual ~MQueueInterface_getCurMsgNum_result() throw() {}

  int32_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const MQueueInterface_getCurMsgNum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MQueueInterface_getCurMsgNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MQueueInterface_getCurMsgNum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MQueueInterface_getCurMsgNum_presult {
 public:


  virtual ~MQueueInterface_getCurMsgNum_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MQueueInterface_quit_args {
 public:

  MQueueInterface_quit_args() {
  }

  virtual ~MQueueInterface_quit_args() throw() {}


  bool operator == (const MQueueInterface_quit_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MQueueInterface_quit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MQueueInterface_quit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MQueueInterface_quit_pargs {
 public:


  virtual ~MQueueInterface_quit_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MQueueInterface_quit_result {
 public:

  MQueueInterface_quit_result() {
  }

  virtual ~MQueueInterface_quit_result() throw() {}


  bool operator == (const MQueueInterface_quit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MQueueInterface_quit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MQueueInterface_quit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MQueueInterface_quit_presult {
 public:


  virtual ~MQueueInterface_quit_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MQueueInterfaceClient : virtual public MQueueInterfaceIf {
 public:
  MQueueInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MQueueInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t getCurMsgNum();
  void send_getCurMsgNum();
  int32_t recv_getCurMsgNum();
  void quit();
  void send_quit();
  void recv_quit();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MQueueInterfaceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MQueueInterfaceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (MQueueInterfaceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_getCurMsgNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_quit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  MQueueInterfaceProcessor(boost::shared_ptr<MQueueInterfaceIf> iface) :
    iface_(iface) {
    processMap_["getCurMsgNum"] = &MQueueInterfaceProcessor::process_getCurMsgNum;
    processMap_["quit"] = &MQueueInterfaceProcessor::process_quit;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~MQueueInterfaceProcessor() {}
};

class MQueueInterfaceMultiface : virtual public MQueueInterfaceIf {
 public:
  MQueueInterfaceMultiface(std::vector<boost::shared_ptr<MQueueInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MQueueInterfaceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MQueueInterfaceIf> > ifaces_;
  MQueueInterfaceMultiface() {}
  void add(boost::shared_ptr<MQueueInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t getCurMsgNum() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getCurMsgNum();
      } else {
        ifaces_[i]->getCurMsgNum();
      }
    }
  }

  void quit() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->quit();
    }
  }

};



#endif
