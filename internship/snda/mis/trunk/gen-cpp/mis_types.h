/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef mis_TYPES_H
#define mis_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





class MISRequest {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  MISRequest() : record_id(""), user_id(""), ip(""), channel(""), content("") {
  }

  virtual ~MISRequest() throw() {}

  std::string record_id;
  std::string user_id;
  std::string ip;
  std::string channel;
  std::string content;

  struct __isset {
    __isset() : record_id(false), user_id(false), ip(false), channel(false), content(false) {}
    bool record_id;
    bool user_id;
    bool ip;
    bool channel;
    bool content;
  } __isset;

  bool operator == (const MISRequest & rhs) const
  {
    if (!(record_id == rhs.record_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(channel == rhs.channel))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MISRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MISRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MISResponse {
 public:

  static const char* ascii_fingerprint; // = "A6609EAC7CD2A291DFDA43A4A8D65B03";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x60,0x9E,0xAC,0x7C,0xD2,0xA2,0x91,0xDF,0xDA,0x43,0xA4,0xA8,0xD6,0x5B,0x03};

  MISResponse() : result(0), reason("") {
  }

  virtual ~MISResponse() throw() {}

  int8_t result;
  std::string reason;

  struct __isset {
    __isset() : result(false), reason(false) {}
    bool result;
    bool reason;
  } __isset;

  bool operator == (const MISResponse & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const MISResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MISResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
